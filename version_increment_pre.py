""" Create version header and tracker file if missing """
import datetime
import os

##Import("env")

## DO NOT EDIT THIS FILE, edit version file if you want to start from a different version
#
#  version_increment_pre.py - Simple versioning script for Platformio
#
#  Copyright (C) 2020  Davide Perini
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  You should have received a copy of the MIT License along with this program.
#  If not, see <https://opensource.org/licenses/MIT/>.
#

VERSION_FILE = 'version'
VERSION_HEADER = 'Version.h'
VERSION_PREFIX = '1.0.'
VERSION_PATCH_NUMBER = 0

print('\nLooking for the ".version_no_increment" file.')
if not os.path.exists(".version_no_increment"):
    try:
        print('Did not find the ".version_no_increment" file.')
        print('Trying to find the "version" file.')
        with open(VERSION_FILE) as FILE:
            print('Found the VERSION_FILE: {}'.format(VERSION_FILE))
            VERSION_PATCH_NUMBER = FILE.readline()
            print('Read the VERSION_PATCH_NUMBER from the "version" file: {}'.format(VERSION_PATCH_NUMBER))
            VERSION_PREFIX = VERSION_PATCH_NUMBER[0:VERSION_PATCH_NUMBER.rindex('.')+1]
            print('Read the VERSION_PREFIX from the "version" file: {}'.format(VERSION_PREFIX))
            VERSION_PATCH_NUMBER = int(VERSION_PATCH_NUMBER[VERSION_PATCH_NUMBER.rindex('.')+1:])
            print('Read the VERSION_PATCH_NUMBER: {}'.format(VERSION_PATCH_NUMBER))

            print('\nLooking for the ".version_no_increment_update_date" file.')
            if not os.path.exists(".version_no_increment_update_date"):
                print('Did not find the ".version_no_increment_update_date" file.')
                VERSION_PATCH_NUMBER = VERSION_PATCH_NUMBER + 1
                print(
                    'The file ".version_no_increment_update_date" does not exist so incrementing the VERSION_PATCH_NUMBER: {}'.format(VERSION_PATCH_NUMBER))
    except:
        print('No version file found or incorrect data in it. Starting from 1.0.0')
        VERSION_PATCH_NUMBER = 0
        print('Set VERSION_PATCH_NUMBER TO 0.')
    with open(VERSION_FILE, 'w+') as FILE:
        print('Opened the "version" file for write.')
        FILE.write(VERSION_PREFIX + str(VERSION_PATCH_NUMBER))
        print('Wrote the VERSION_PREFIX: {}'.format(VERSION_PREFIX))
        print('Wrote the VERSION_PATCH_NUMBER: {}'.format(VERSION_PATCH_NUMBER))
        print('Build number: {}'.format(VERSION_PREFIX + str(VERSION_PATCH_NUMBER)))

    print('Creating and populating the contents of the HEADER_FILE "Version.h".')
    HEADER_FILE = """
    // AUTO GENERATED FILE, DO NOT EDIT
    #ifndef VERSION
        #define VERSION "{}"
    #endif
    #ifndef BUILD_TIMESTAMP
        #define BUILD_TIMESTAMP "{}"
    #endif
    """.format(VERSION_PREFIX + str(VERSION_PATCH_NUMBER), datetime.datetime.now())

    print('\nLooking for PLATFORMIO_INCLUDE_DIR from PlatformIO in the "include" directory.')
    if os.environ.get('PLATFORMIO_INCLUDE_DIR') is not None:
        print('Found the PLATFORMIO_INCLUDE_DIR directory.')
        VERSION_HEADER = os.environ.get('PLATFORMIO_INCLUDE_DIR') + os.sep + VERSION_HEADER
        print('This is the VERSION_HEADER: {}'.format(VERSION_HEADER))
    elif os.path.exists("include"):
        print('Found the "include" directory.')
        VERSION_HEADER = "include" + os.sep + VERSION_HEADER
        print('This is the VERSION_HEADER: {}'.format(VERSION_HEADER))
    else:
        print('Lets try the $PROJECT_DIR from PlatformIO.')
        PROJECT_DIR = env.subst("$PROJECT_DIR")
        print('This is the PROJECT_DIR: {}'.format(PROJECT_DIR))
        os.mkdir(PROJECT_DIR + os.sep + "include")
        print('Made a directory in the PlatformIO PROJECT_DIR called "include".')
        VERSION_HEADER = "include" + os.sep + VERSION_HEADER
        print('This is the VERSION_HEADER: {}'.format(VERSION_HEADER))

    with open(VERSION_HEADER, 'w+') as FILE:
        print('Opening the VERSION_HEADER file for write: {}'.format(VERSION_HEADER))
        FILE.write(HEADER_FILE)
        print('Wrote the HEADER_FILE to disk: {}'.format(HEADER_FILE))

    print('\nNow creating the ".version_no_increment" file.')
    open('.version_no_increment', 'a').close()
    print('Created the ".version_no_increment" file.\n')
else:
    print('Found the ".version_no_increment" file.')
    print('Now looking for the "version" file.')
    if os.path.exists("version"):
        print('Found the "version" file, now opening it get the version number.')
        FILE = open(VERSION_FILE)
        VERSION_NUMBER = FILE.readline()
        print('Read the VERSION_NUMBER from "the version" file.')
        print('Build number: {} (waiting for upload before next increment)'.format(str(VERSION_NUMBER)))
    else:
        print('No version file found or incorrect data in it!!')
