; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:teensy41]
platform = https://github.com/platformio/platform-teensy.git
board = teensy41
framework = arduino
build_flags = -Wl,--print-memory-usage
lib_extra_dirs = ~/Documents/Arduino/libraries

extra_scripts = 
   pre:version_increment_pre.py
   post:version_increment_post.py

check_tool = cppcheck
check_flags = --enable=all

; change MCU frequency
;board_build.f_cpu = 600000000L	;600MHz for Teensy 4.1
;board_build.f_cpu = 450000000	;450MHz for Teensy 4.1
;board_build.f_cpu = 180000000L	;180MHz for Teensy 3.6
;board_build.f_cpu = 120000000L	;180MHz for Teensy 3.5
;board_build.f_cpu = 72000000L	;72MHz to 96MHz for Teensy 3.2
;board_build.f_cpu = 450000000

;build_flags =     
;    -DUSB_MIDI_AUDIO_SERIAL
;    -DIMPROVE_HIGH_FREQUENCY_ACCURACY
;    -DIMPROVE_EXPONENTIAL_ACCURACY

;build_type = debug
;debug_port = /dev/cu.usbmodem61684903  ;Or something similar
;debug_tool = custom
;debug_load_mode = manual
;debug_server = 
;debug_init_cmds =
  ;target extended-remote $DEBUG_PORT
  ;$INIT_BREAK
  ;define pio_reset_run_target
  ;interrupt
  ;tbreak loop
  ;continue
  ;end
  ;define pio_restart_target
  ;echo Restart is undefined for now.
  ;end
  
;lib_deps = 
;	https://github.com/ftrias/TeensyDebug/archive/refs/heads/master.zip 
;	thijse/EEPROMEx@0.0.0-alpha+sha.09d7586108
;	adafruit/Adafruit SleepyDog Library@^1.6.0
;	sparkfun/SparkFun BME280@^2.0.9
;	milesburton/DallasTemperature@^3.9.1
;	jchristensen/Timezone@^1.2.4

; ;activate Dual USB just as README says
;build_flags =
    ;-D USB_DUAL_SERIAL
;
;debug_init_break =

;	Optimization
;You can control firmware optimization via special macro/define using build_flags in “platformio.ini” (Project Configuration File):
;build_flags =
;	-D TEENSY_OPT_FASTER, default
;	-D TEENSY_OPT_FASTER_LTO
;	-D TEENSY_OPT_FAST
;	-D TEENSY_OPT_FAST_LTO
;	-D TEENSY_OPT_FASTEST
;	-D TEENSY_OPT_FASTEST_LTO
;	-D TEENSY_OPT_FASTEST_PURE_CODE, valid only for Teensy 3.5-3.6
;	-D TEENSY_OPT_FASTEST_PURE_CODE_LTO, valid only for Teensy 3.5-3.6
;	-D TEENSY_OPT_DEBUG
;	-D TEENSY_OPT_DEBUG_LTO
;	-D TEENSY_OPT_SMALLEST_CODE
;	-D TEENSY_OPT_SMALLEST_CODE_LTO
;The only one macro can be used in per one build environment. Also, you can see verbose build using -v, --verbose option for pio run command.
;
;	USB Features
;If you want to use Teensy USB Features, you need to add special macro/define using build_flags:
;	-D USB_SERIAL
;	-D USB_DUAL_SERIAL
;	-D USB_TRIPLE_SERIAL
;	-D USB_KEYBOARDONLY
;	-D USB_TOUCHSCREEN
;	-D USB_HID_TOUCHSCREEN
;	-D USB_HID
;	-D USB_SERIAL_HID
;	-D USB_MIDI
;	-D USB_MIDI4
;	-D USB_MIDI16
;	-D USB_MIDI_SERIAL
;	-D USB_MIDI4_SERIAL
;	-D USB_MIDI16_SERIAL
;	-D USB_AUDIO
;	-D USB_MIDI_AUDIO_SERIAL
;	-D USB_MIDI16_AUDIO_SERIAL
;	-D USB_MTPDISK
;	-D USB_RAWHID
;	-D USB_FLIGHTSIM
;	-D USB_FLIGHTSIM_JOYSTICK
;	-D USB_EVERYTHING
;	-D USB_DISABLED
;
;A default macro is set to -D USB_SERIAL if none is specified.

;	-DIMPROVE_HIGH_FREQUENCY_ACCURACY
;	-DIMPROVE_EXPONENTIAL_ACCURACY
;
; Do not include folders /lib/console and /misc
;[env:no_console]
;src_filter = ${env.src_filter} -<../lib/ina226/> -<../misc/>

;It could be very useful when working on new library versions, comparing them against the old, currently installed within the framework ones. 
;Simply add the new version in the /lib folder and create a conditional build, ie:
;[platformio]
;default_builds = stock_lib
;[env]
; define board, framework, platform etc here
;[env:stock_build]
;src_filter = ${env.src_filter} -<../lib/new_lib_test_version/>
;If the default_libs is set to stock_lib, the local library folder will not be included and the compiler will grab+link the global version.
;